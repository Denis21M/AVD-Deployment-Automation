name: Deploy AVD Environment

on:
  push:
    branches: [ main ]

jobs:
  deploy-avd:
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: avd-rg
      LOCATION: eastus
      HOSTPOOL_NAME: avd-hostpool
      APPGROUP_NAME: avd-appgroup

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login using Service Principal
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Delete existing AVD Host Pool if exists
        run: |
          az desktopvirtualization hostpool delete \
            --resource-group $RESOURCE_GROUP \
            --name $HOSTPOOL_NAME \
            --yes || echo "Host pool not found, skipping deletion"

      - name: Deploy Host Pool
        id: deploy_hostpool
        run: |
          expirationTime=$(date -u -d "+30 days" +"%Y-%m-%dT%H:%M:%SZ" || date -u -v+30d +"%Y-%m-%dT%H:%M:%SZ")
          echo "Expiration Time is: $expirationTime"

          hostPoolDeploy=$(az deployment group create \
            --resource-group $RESOURCE_GROUP \
            --template-file ./bicep/hostpool.bicep \
            --parameters hostPoolName=$HOSTPOOL_NAME \
                         location=$LOCATION \
            --output json)

          echo "$hostPoolDeploy" > hostpool_deploy.json

          hostPoolId=$(jq -r '.properties.outputs.hostPoolId.value' hostpool_deploy.json)
          echo "hostPoolId=$hostPoolId" >> $GITHUB_ENV
          echo "::set-output name=hostPoolId::$hostPoolId"

      - name: Deploy Application Group
        run: |
          az deployment group create \
            --resource-group $RESOURCE_GROUP \
            --template-file ./bicep/applicationgroup.bicep \
            --parameters appGroupName=$APPGROUP_NAME \
                         location=$LOCATION \
                         hostPoolResourceId=$hostPoolId

      - name: Deploy AVD Workspace
        run: |
          appGroupResourceId="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.DesktopVirtualization/applicationGroups/$APPGROUP_NAME"
          
          az deployment group create \
            --resource-group $RESOURCE_GROUP \
            --template-file ./bicep/workspace.bicep \
            --parameters location=$LOCATION \
                        appGroupResourceId=$appGroupResourceId \
                        workspaceName="avd-workspace"

      - name: Reset registration info and retrieve token
        run: |
          echo "Resetting registration info for host pool..."
          expirationTime=$(date -u -d "+30 days" +"%Y-%m-%dT%H:%M:%SZ")
          echo "Expiration Time is: $expirationTime"

          az desktopvirtualization hostpool update \
            --resource-group $RESOURCE_GROUP \
            --name $HOSTPOOL_NAME \
            --set registrationInfo.expirationTime="$expirationTime"

          registrationToken=$(az desktopvirtualization hostpool show \
            --resource-group $RESOURCE_GROUP \
            --name $HOSTPOOL_NAME \
            --query "registrationInfo.token" \
            --output tsv)

          echo "registrationToken=$registrationToken" >> $GITHUB_ENV
          echo "::set-output name=registrationToken::$registrationToken"

      - name: Deploy Session Hosts from custom image
        run: |
          az deployment group create \
            --resource-group $RESOURCE_GROUP \
            --template-file ./bicep/sessionhosts.bicep \
            --parameters sessionHostNamePrefix="session-host" \
                         location=$LOCATION \
                         imageId="${{ secrets.IMAGE_ID }}" \
                         subnetId="${{ secrets.SUBNET_ID }}" \
                         adminUsername="${{ secrets.VM_ADMIN_USERNAME }}" \
                         adminPassword="${{ secrets.VM_ADMIN_PASSWORD }}" \
                         domainToJoin="chinazom.com" \
                         domainJoinUsername="${{ secrets.DOMAIN_JOIN_USERNAME }}" \
                         domainJoinPassword="${{ secrets.DOMAIN_JOIN_PASSWORD }}" \
                         identityId="${{ secrets.IDENTITY_ID }}" \
                         registrationToken="${{ env.registrationToken }}" \
                         sessionHostCount=1
